name: 🚀 CI/CD Pipeline - Automated Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov bandit flake8
    
    - name: 🔧 Setup Django
      run: |
        cd backend
        python manage.py collectstatic --noinput
        python manage.py migrate
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/testdb
        DJANGO_SETTINGS_MODULE: backend_project.settings
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
    
    - name: 🧪 Run Django Tests
      run: |
        cd backend
        python manage.py test --verbosity=2
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/testdb
        DJANGO_SETTINGS_MODULE: backend_project.settings
        SECRET_KEY: test-secret-key-for-ci
    
    - name: 🔒 Security Analysis
      run: |
        cd backend
        bandit -r apps/ -f json -o bandit-report.json || true
        
    - name: 📊 Code Quality Check
      run: |
        cd backend
        flake8 apps/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: 📤 Upload Backend Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-reports
        path: |
          backend/bandit-report.json
          backend/coverage.xml

  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: 🔍 ESLint Check
      run: |
        cd frontend
        npm run lint
    
    - name: 🧪 Unit Tests
      run: |
        cd frontend
        npm run test:unit
    
    - name: 🔒 Security Audit
      run: |
        cd frontend
        npm audit --audit-level moderate || true
    
    - name: 🏗️ Build Test
      run: |
        cd frontend
        npm run build
      env:
        CI: false
    
    - name: 📤 Upload Coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        cd frontend && npm ci
    
    - name: 🚀 Start Backend
      run: |
        cd backend
        python manage.py migrate
        python manage.py collectstatic --noinput
        python manage.py runserver &
        sleep 10
      env:
        DJANGO_SETTINGS_MODULE: backend_project.settings
        SECRET_KEY: test-secret-key-for-ci
    
    - name: 🚀 Start Frontend
      run: |
        cd frontend
        npm start &
        sleep 30
      env:
        CI: false
    
    - name: 🌐 Run Cypress Tests
      run: |
        cd frontend
        npm run cypress:run:headless
      env:
        CYPRESS_baseUrl: http://localhost:3000
    
    - name: 📤 Upload E2E Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-reports
        path: |
          frontend/cypress/reports/
          frontend/cypress/screenshots/
          frontend/cypress/videos/

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: 📦 Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: 🏗️ Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: 🚀 Serve Frontend
      run: |
        cd frontend
        npx serve -s build -l 3000 &
        sleep 10
    
    - name: ⚡ Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  integration-report:
    name: 📊 Integration Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: 📊 Generate Integration Report
      run: |
        echo "# 🚀 CI/CD Test Report" > report.md
        echo "" >> report.md
        echo "## 📈 Test Results Summary" >> report.md
        echo "" >> report.md
        echo "| Component | Status |" >> report.md
        echo "|-----------|---------|" >> report.md
        
        # Backend status
        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "| Backend Tests | ✅ Passed |" >> report.md
        else
          echo "| Backend Tests | ❌ Failed |" >> report.md
        fi
        
        # Frontend status  
        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "| Frontend Tests | ✅ Passed |" >> report.md
        else
          echo "| Frontend Tests | ❌ Failed |" >> report.md
        fi
        
        # E2E status
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "| E2E Tests | ✅ Passed |" >> report.md
        else
          echo "| E2E Tests | ❌ Failed |" >> report.md
        fi
        
        echo "" >> report.md
        echo "Generated at: $(date)" >> report.md
        
        cat report.md
    
    - name: 📤 Upload Integration Report
      uses: actions/upload-artifact@v4
      with:
        name: integration-report
        path: report.md
    
    - name: 💬 Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          }); 